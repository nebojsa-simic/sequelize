var Utils       = require("./utils")
	, Util        = require('util')
	, DAO         = require("./dao")
	, DataTypes   = require("./data-types");

module.exports = (function () {

	var DAOTranslatable = function (daofactory) {
		var self = this;
			
		this.daofactory = daofactory;

		/// default locale
		this.defaultLocale = daofactory.options.defaultLocale;
		this.daofactory.options.classMethods["setDefaultLocale"] = function (defLocale) {
			self.defaultLocale = defLocale;
		};
		this.daofactory.options.classMethods["getDefaultLocale"] = function () {
			return self.defaultLocale;
		};

		// DAO prototype
		this.DAO = function() {
		  DAO.apply(this, arguments);
		}
		Util.inherits(this.DAO, DAO);
		this.DAO.prototype.Model = this;
		this.DAO.prototype.validators = {}

		
		this.options = Utils._.clone(this.daofactory.options);
		this.options.freezeTableName = true;

		if (this.options.instanceMethods) {
		  Utils._.each(this.options.instanceMethods, function(fct, name) {
			self.DAO.prototype[name] = fct
		  })
		}

		this._timestampAttributes = {}
		if (this.options.timestamps) {
		  if (this.options.createdAt) {
			this._timestampAttributes.createdAt = Utils._.underscoredIf(this.options.createdAt, this.options.underscored)
			this.options.translatable.push("createdAt");
		  }
		  if (this.options.updatedAt) {
			this._timestampAttributes.updatedAt = Utils._.underscoredIf(this.options.updatedAt, this.options.underscored)
			this.options.translatable.push("updatedAt");
		  }
		  if (this.options.paranoid && this.options.deletedAt) {
			this._timestampAttributes.deletedAt = Utils._.underscoredIf(this.options.deletedAt, this.options.underscored)
			this.options.translatable.push("deletedAt");
		  }
		}

		// this.daofactory.options.hooks.afterCreate.push(Utils._.bind(this.afterCreate, this));

		this.tableName = this.daofactory.tableName + "_locale";
	}

	DAOTranslatable.prototype = {
		initAttributes: function () {
			var self = this;

			this.daoFactoryManager = this.daofactory.daoFactoryManager;

			this.rawBaseAttributes = {};
			this.rawLocaleAttributes = {};
			this.primaryKeys        = {}
			
			Utils._.each(this.daofactory.rawAttributes, function (options, attribute) {
				var isTranslatableAttribute = Utils._.indexOf(self.options.translatable, attribute) !== -1;

				if (isTranslatableAttribute && options.primaryKey) {
					throw new Error("Primary key can not be translated. Model: " + name + ", primary key " + attribute);   
				}

				if (isTranslatableAttribute) {
					this.rawLocaleAttributes[attribute] = options;
				}

				if (!isTranslatableAttribute) {
					this.rawBaseAttributes[attribute] = options;
				}

				if (options.primaryKey === true) {
					this.rawBaseAttributes[attribute] = options;
					this.rawLocaleAttributes[attribute] = Utils._.clone(options);
					this.rawLocaleAttributes[attribute].autoIncrement = false;
					this.primaryKeys[attribute] = this.attributes[attribute];
				}
			}, this);

			if (this._timestampAttributes.createdAt) {
			  	self.rawLocaleAttributes[this._timestampAttributes.createdAt] = {
					type: DataTypes.DATE,
					allowNull: false,
					_autoGenerated: true,
			  	};
			}
			if (this._timestampAttributes.updatedAt) {
			  	self.rawLocaleAttributes[this._timestampAttributes.updatedAt] = {
				  	type: DataTypes.DATE,
				  	allowNull: false,
				  	_autoGenerated: true,
			  	};
			}
			if (this._timestampAttributes.deletedAt) {
			  	self.rawLocaleAttributes[this._timestampAttributes.deletedAt] = {
				  	type: DataTypes.DATE,
				  	_autoGenerated: true,
			  	};
			}

			this.rawLocaleAttributes["locale"] = {
				type: DataTypes.STRING(5),
				primaryKey: true,
				allowNull: false, 
				defaultValue: this.daofactory.options.defaultLocale,
				_autoGenerated: true
			};

			this.daofactory.rawAttributes = this.rawBaseAttributes;
			this.rawAttributes = this.rawLocaleAttributes;

			this.primaryKeys["locale"] = this.attributes["locale"];
			
			this.primaryKeyAttributes = Object.keys(this.primaryKeys);
			this.primaryKeyAttribute = this.primaryKeyAttributes[0];
		},

		initBooleanDateAndDefaultValues: function () {	
			var self = this;
			this._booleanAttributes = this._dateAttributes = [];
			this._defaultValues = {};

			Utils._.each(this.rawLocaleAttributes, function (definition, name) {
				if (((definition === DataTypes.BOOLEAN) || (definition.type === DataTypes.BOOLEAN))) {
					self._booleanAttributes.push(name);
				}
				if (((definition === DataTypes.DATE) || (definition.type === DataTypes.DATE) || (definition.originalType === DataTypes.DATE))) {
					self._dateAttributes.push(name);
				}
				if (definition.hasOwnProperty('defaultValue')) {
					self._defaultValues[name] = Utils._.partial(Utils.toDefaultValue, definition.defaultValue)
				}

				if (definition.hasOwnProperty('validate')) {
					self.DAO.prototype.validators[name] = definition.validate;
				}
			});

			this._hasDefaultValues = !Utils._.isEmpty(this._defaultValues)
		},

		create: function (values, fieldsOrOptions, createdDao) {
			var self = this;

			return new Utils.CustomEventEmitter(function (emitter) {
				var _sql_ = "";
				createdDao
					.proxy(emitter, {events: ['error']})
					.sql(function (sql) { _sql_ += sql; } )
					.success(function (createdObject) {			
						Utils._.each(self.primaryKeys, function (definition, name) {
							if (name !== "locale") {
								self._defaultValues[name] = function () { return createdObject[name] };
							} else {
								self._defaultValues[name] = function () { return self.defaultLocale; };
							}
						}, self);

						newdao = self.daofactory.build.call(self, values, { isNewRecord: true}).save(fieldsOrOptions);

						newdao
							.proxy(emitter, {events: ['error']})
							.sql(function (sql) {
								emitter.emit('sql', _sql_ + "\n" + sql);
							})
							.success(function (newObject) {
								Utils._.each(createdObject.values, function (value, index) {
									newObject[index] = value; 
								});
								emitter.emit('success', newObject);
							});
					});
			}).run();
		},

		getTableName: function () {
			return this.daofactory.QueryGenerator.addSchema(this);
		},

		sync: function (options, emitter) {
			var self = this;

			self.daofactory
				.QueryInterface
				.createTable(self.getTableName(), self.daofactory.localeAttributes, options)
				.proxy(emitter, {events: ['error', 'sql']})
				.success(function() {
					emitter.emit('success', self.daofactory);
				});
		},

		refreshAttributes: function () {
			return this.daofactory.refreshAttributes.call(this);
		}
	}

	Object.defineProperty(DAOTranslatable.prototype, 'localeAttributes', {
		get: function() {
			return this.daofactory.QueryGenerator.attributesToSQL(this.rawLocaleAttributes);
		}
	});

	Object.defineProperty(DAOTranslatable.prototype, 'attributes', {
		get: function() {
			return this.daofactory.QueryGenerator.attributesToSQL(this.rawAttributes)
		}
	})
  
	Utils._.extend(DAOTranslatable.prototype, require("./associations/mixin"))
	Utils._.extend(DAOTranslatable.prototype, require(__dirname + '/hooks'))

	return DAOTranslatable;
})();