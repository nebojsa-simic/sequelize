var Utils       = require("./utils")
	, DataTypes   = require("./data-types");

module.exports = (function () {

	var DAOTranslatable = function (daofactory) {
		var self = this;

		this.daofactory = daofactory;

		/// default locale
		this.defaultLocale = daofactory.options.defaultLocale;
		this.daofactory.options.classMethods["setDefaultLocale"] = function (defLocale) {
			self.defaultLocale = defLocale;
		};
		this.daofactory.options.classMethods["getDefaultLocale"] = function () {
			return self.defaultLocale;
		};
			
		this.tableName = this.daofactory.tableName + "_locale";
	}

	DAOTranslatable.prototype = {
		initAttributes: function () {
			var self = this;

			this.rawBaseAttributes = {};
			this.rawLocaleAttributes = {};
			Utils._.each(this.daofactory.rawAttributes, function (options, attribute) {
				var isTranslatableAttribute = Utils._.indexOf(self.daofactory.options.translatable, attribute) !== -1;

				if (isTranslatableAttribute && options.primaryKey) {
				  throw new Error("Primary key can not be translated. Model: " + name + ", primary key " + attribute);   
				}

				if (isTranslatableAttribute || options.primaryKey) {
				  self.rawLocaleAttributes[attribute] = options;
				} 
				if (!isTranslatableAttribute) {
				  self.rawBaseAttributes[attribute] = options;
				}
			}, this);

			this.rawLocaleAttributes["locale"] = {
				type: DataTypes.STRING(5),
				allowNull: false, 
				defaultValue: this.daofactory.options.defaultLocale,
				_autoGenerated: true
			};

			this.daofactory.rawAttributes = this.rawBaseAttributes;
			this.rawAttributes = this.rawLocaleAttributes;
		},

		getTableName: function () {
			return this.daofactory.QueryGenerator.addSchema(this);
		},

		sync: function (options, emitter) {
			var self = this;

			self.daofactory
				.QueryInterface
				.createTable(self.getTableName(), self.daofactory.localeAttributes, options)
				.proxy(emitter, {events: ['error', 'sql']})
				.success(function() {
				  emitter.emit('success', self.daofactory);
				});
		},

		refreshAttributes: function () {
			return Utils._.bind(this.daofactory.refreshAttributes, {
				DAO: this.daofactory.DAO,
				rawAttributes: this.rawLocaleAttributes,
				options: this.daofactory.options
			})();
		},

		initBooleanDateAndDefaultValues: function () {	
			var self = this.daofactory;
			Utils._.each(this.rawLocaleAttributes, function (definition, name) {
				if (((definition === DataTypes.BOOLEAN) || (definition.type === DataTypes.BOOLEAN))) {
					self._booleanAttributes.push(name);
				}
				if (((definition === DataTypes.DATE) || (definition.type === DataTypes.DATE) || (definition.originalType === DataTypes.DATE))) {
					self._dateAttributes.push(name);
				}
				if (definition.hasOwnProperty('defaultValue')) {
					self._defaultValues[name] = Utils._.partial(
				  		Utils.toDefaultValue, definition.defaultValue)
				}

				if (definition.hasOwnProperty('validate')) {
					self.DAO.prototype.validators[name] = definition.validate;
				}
			});
		}
	}

	Object.defineProperty(DAOTranslatable.prototype, 'localeAttributes', {
		get: function() {
			return this.daofactory.QueryGenerator.attributesToSQL(this.rawLocaleAttributes);
		}
	});

	return DAOTranslatable;
})();